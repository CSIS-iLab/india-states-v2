name: Update Algolia

on:
  workflow_dispatch:
  schedule:
    - cron: "30 12 */1 * *"

jobs:
  Update-Algolia:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "21"
      - uses: actions/cache@v4
        with:
          path: ~/.npm
          # key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}-${{ github.run_id }}

          restore-keys: |
            ${{ runner.os }}-node-

      - run: echo "Updating the algolia content..."
      # - run: npm install -D algoliasearch
      - run: npm install algoliasearch
      - run: npm list algoliasearch  # Add this to confirm the installed version

      - uses: actions/github-script@v7
        env:
          API_KEY: ${{ secrets.ALGOLIA_ADMIN_API_KEY }}
          APP_KEY: ${{ secrets.ALGOLIA_APPLICATION_ID }}
        with:
          script: |
            try {
              import { algoliasearch } from "algoliasearch";
              const { API_KEY, APP_KEY } = process.env;
              const client = algoliasearch(`${APP_KEY}`, `${API_KEY}`);
              const index = client.initIndex('india_states');

              const response = await fetch("https://indianstates.csis.org/algolia.json");
              if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);

              const data = await response.json();
              await index.saveObjects(data, { autoGenerateObjectIDIfNotExist: true });

              console.log("‚úÖ Data successfully updated in Algolia! üéâ");
            } catch (error) {
              console.error("‚ùå Error updating Algolia:", error.message);
              core.setFailed(`Workflow failed: ${error.message}`); // Make GitHub Action fail
            }

      - run: echo "üéâ We reached the end of the workflow successfully!"
        if: success()

      - run: echo "‚ùå Workflow failed. Check the logs for details."
        if: failure()
